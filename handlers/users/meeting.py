from aiogram.types import CallbackQuery

import constants
from enum_constans import meeting_status_constant, waiting_status_constant, not_ready_status_constant, see_you_in_week, \
    find_companion_on_Monday, error_contact_support
from keyboards.inline.callback_data import change_meeting_status_callback, meeting_status_callback
from loader import dp
from request_to_server.requests import patch, login


# @dp.message_handler(Command("meeting"))
# async def meeting(message: types.Message):
#
#     await message.answer('–¢—ã –≤—ã–±—Ä–∞–ª –æ–ø—Ü–∏—é —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –≤—Å—Ç—Ä–µ—á–∏')
#
#     all_profiles = await pg_db.select_all_profiles_for_meeting()
#
#
#     await message.answer('—á–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ –ø—Ä–æ—Ñ–∏–ª–µ–π')
#
#     while len(all_profiles) > 0:
#         print(f'-------------–í–µ—Å—å —Å–ø–∏—Å–æ–∫ –¥–æ –≤–∑—è—Ç–∏—è –ø–µ—Ä–≤–æ–≥–æ: {all_profiles}---------------------')
#         first_profile = all_profiles.pop(0)
#         print(f'-------------–ü–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {first_profile[1]}---------------------')
#         print(f'-------------–í–µ—Å—å —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ –≤–∑—è—Ç–∏—è –ø–µ—Ä–≤–æ–≥–æ: {all_profiles}----------------------')
#
#         selection_list=all_profiles.copy()
#
#         meeting_success=False
#         while (len(selection_list) > 0) and (not meeting_success):
#             second_profile_number = randint(0, len(selection_list) - 1)
#             second_profile = selection_list[second_profile_number]
#             print(f'-------------–í—Ç–æ—Ä–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {second_profile[1]}-------------------')
#             print(f'-------------–í–µ—Å—å —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ –≤–∑—è—Ç–∏—è –≤—Ç–æ—Ä–æ–≥–æ: {all_profiles}---------------------')
#
#             # if ..... –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å—Ç—Ä–µ—á–∞–ª–∏—Å—å –ª–∏ first_profile –∏ second_profile –¥–æ —ç—Ç–æ–≥–æ
#
#             meeting_list = await pg_db.select_meet_list(first_profile[1])
#
#             meeting_indicator = False
#             for meet in meeting_list:
#
#                 if second_profile[1] == meet[6]:
#                     meeting_indicator = True
#                     print(f'-------------meeting_indicator = True. –ê –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –ø—Ä–∏ —ç—Ç–æ–º: {all_profiles}---------------------')
#
#
#             if meeting_indicator == False:
#                 print(f'------------–ü–∞—Ä–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞--------------')
#                 await pg_db.add_meet(first_profile[1], second_profile[1], date_meeting=datetime.datetime.now())
#                 meeting_success=True
#             else:
#                 selection_list.pop(second_profile_number)
#                 print(f'------------–¢–∞–∫–∞—è –ø–∞—Ä–∞ —É–∂–µ –±—ã–ª–∞--------------')
#                 print(f'-------------–ê –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –ø—Ä–∏ —ç—Ç–æ–º: {all_profiles}---------------------')
#
#         if meeting_success == True:
#             print(f'-------------–£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {all_profiles[second_profile_number]}---------------------')
#             all_profiles.pop(second_profile_number)


@dp.callback_query_handler(change_meeting_status_callback.filter(status="change_meeting_status"))
async def change_meeting_status(callback: CallbackQuery):
    await callback.answer(cache_time=10)

    current_meeting_status = login(callback.from_user.id, constants.machine_token_constant).json().get("meeting_status")
    token = login(callback.from_user.id, constants.machine_token_constant).json().get("token")

    if current_meeting_status == waiting_status_constant:
        await callback.message.answer("""–¢–æ–≥–¥–∞, –Ω–∞–¥–µ—é—Å—å, —É–≤–∏–¥–∏–º—Å—è –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, –∫–æ–≥–¥–∞ –º—ã –Ω–∞—á–∏–Ω–∞–µ–º –Ω–µ–¥–µ–ª—é –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—áüì¨""")
        patch(not_ready_status_constant, token)


    elif current_meeting_status == not_ready_status_constant:
        await callback.message.answer("""–¢–æ–≥–¥–∞ –º—ã –Ω–∞—á–Ω–µ–º –ø–æ–∏—Å–∫ –Ω–µ–º–µ–¥–ª—è. –°–∫–æ—Ä–æ –≤–µ—Ä–Ω–µ–º—Å—è —Å –Ω–æ–≤—ã–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º‚è∞""")
        patch(waiting_status_constant, token)



# –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å waiting
@dp.callback_query_handler(meeting_status_callback.filter(status="meeting_status = waiting"))
async def meeting_status_waiting(callback: CallbackQuery):
    await callback.answer(cache_time=10)

    token = login(callback.from_user.id, constants.machine_token_constant).json().get("token")

    if patch(waiting_status_constant, token) == 200:
        await callback.message.answer(find_companion_on_Monday)

    else:
        await callback.message.answer(error_contact_support)


# –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å not ready
@dp.callback_query_handler(meeting_status_callback.filter(status="meeting_status = not ready"))
async def meeting_status_not_ready(callback: CallbackQuery):
    await callback.answer(cache_time=10)

    token = login(callback.from_user.id, constants.machine_token_constant).json().get("token")

    if patch(not_ready_status_constant, token) == 200:
        await callback.message.answer(see_you_in_week)

    else:
        await callback.message.answer(error_contact_support)
